const oracle = require('../../config/db'),
      logger = require('../utils/logger'),
      utils  = require('../utils/utils');

const SCHEMA='SIGSA',
      TABLE='ALL_COMPANIES',
      ATTR={
        ID:               ['ID'               , 'id'],
        UBIGEO:           ['UBIGEO'           , 'ubigeo'],
        DEPARTAMENTO:     ['DEPARTAMENTO'     , 'department'],
        PROVINCIA:        ['PROVINCIA'        , 'province'],
        DISTRITO:         ['DISTRITO'         , 'district'],
        HQ:               ['HQ'               , 'hq'],
        NAME:             ['NAME'             , 'name'],
        RUC:              ['RUC'              , 'ruc'],
        DNI:              ['DNI'              , 'dni'],
        ADDRESS_LEGAL:    ['ADDRESS_LEGAL'    , 'address_legal'],
        ADDRESS_REAL:     ['ADDRESS_REAL'     , 'address_real'],
        LOCATION:         ['LOCATION'         , 'location'],
        GEO_LAT:          ['GEO_LAT'          , 'geo_lat'],
        GEO_LONG:         ['GEO_LONG'         , 'geo_long'],
        YEAR_:            ['YEAR_'            , 'year'],
        START_DATE:       ['START_DATE'       , 'start_date'],
        END_DATE:         ['END_DATE'         , 'end_date'],
        DOCUMENT_CODE:    ['DOCUMENT_CODE'    , 'document_code'],
        TUITION_CODE:     ['TUITION_CODE'     , 'tuition_code'],
        RUC_PROFESSIONAL: ['RUC_PROFESSIONAL' , 'ruc_professional'],
        FILE_CODE:        ['FILE_CODE'        , 'file_code'],
        FILE_CODE_AUI:    ['FILE_CODE_AUI'    , 'file_code_aui'],
        ESTATE_CODE:      ['ESTATE_CODE'      , 'estate_code'],
        AUTH_CODE:        ['AUTH_CODE'        , 'auth_code'],
        VET_CODE:         ['VET_CODE'         , 'vet_code'],
        REQUEST_CODE:     ['REQUEST_CODE'     , 'request_code'],
        LINE:             ['LINE'             , 'line'],
        CATEGORY:         ['CATEGORY'         , 'category'],
        STATE:            ['STATE'            , 'state'],
        IS_ACTIVE:        ['IS_ACTIVE'        , 'is_active'],
        FLAG_DIST_VET:    ['FLAG_DIST_VET'    , 'flag_dist_vet'],
        FLAG_ENVA_VET:    ['FLAG_ENVA_VET'    , 'flag_enva_vet'],
        FLAG_EXPE_VET:    ['FLAG_EXPE_VET'    , 'flag_expe_vet'],
        FLAG_EXPO_VET:    ['FLAG_EXPO_VET'    , 'flag_expo_vet'],
        FLAG_FABR_ALI:    ['FLAG_FABR_ALI'    , 'flag_fabr_ali'],
        FLAG_FABR_ALIMED: ['FLAG_FABR_ALIMED' , 'flag_fabr_alimed'],
        FLAG_FABR_BIO:    ['FLAG_FABR_BIO'    , 'flag_fabr_bio'],
        FLAG_FABR_FAR:    ['FLAG_FABR_FAR'    , 'flag_fabr_far'],
        FLAG_FABR_VET:    ['FLAG_FABR_VET'    , 'flag_fabr_vet'],
        FLAG_IMPO_VET:    ['FLAG_IMPO_VET'    , 'flag_impo_vet'],
        FLAG_NUEVO:       ['FLAG_NUEVO'       , 'flag_nuevo'],
        FECH_ENTR_CIE:    ['FECH_ENTR_CIE'    , 'fech_entr_cie'],
        FECH_EXPE_EMP:    ['FECH_EXPE_EMP'    , 'fech_expe_emp'],
        FECH_MODI:        ['FECH_MODI'        , 'fech_modi'],
        FECH_RECE_SOL:    ['FECH_RECE_SOL'    , 'fech_rece_sol'],
        FECH_REGI_EMP:    ['FECH_REGI_EMP'    , 'fech_regi_emp'],
        FECH_SOLI_EMP:    ['FECH_SOLI_EMP'    , 'fech_soli_emp'],
        FECH_VIGE_EMP:    ['FECH_VIGE_EMP'    , 'fech_vige_emp'],
        NUME_FOLI_EMP:    ['NUME_FOLI_EMP'    , 'nume_foli_emp'],
        NUME_FOLI_EXP:    ['NUME_FOLI_EXP'    , 'nume_foli_exp'],
        NUME_REGI_HIS:    ['NUME_REGI_HIS'    , 'nume_regi_his'],
        NUME_REGI_TMP:    ['NUME_REGI_TMP'    , 'nume_regi_tmp'],
        OBSE_FOLI_EXP:    ['OBSE_FOLI_EXP'    , 'obse_foli_exp'],
        RDIR_FECH_EMP:    ['RDIR_FECH_EMP'    , 'rdir_fech_emp'],
        REFE_DIRE_EMP:    ['REFE_DIRE_EMP'    , 'refe_dire_emp'],
        REGI_LIBR_EMP:    ['REGI_LIBR_EMP'    , 'regi_libr_emp'],
        REPR_LEGA_EMP:    ['REPR_LEGA_EMP'    , 'repr_lega_emp'],
        TELE_EMPR_EMP:    ['TELE_EMPR_EMP'    , 'tele_empr_emp'],
        TIPO_PERS_PRO:    ['TIPO_PERS_PRO'    , 'person_type'],
        TIPO_ALIMENTO:    ['TIPO_ALIMENTO'    , 'food_type'],
        UBIF_ALMA_EMP:    ['UBIF_ALMA_EMP'    , 'ubif_alma_emp'],
        UBIF_EXPE_EMP:    ['UBIF_EXPE_EMP'    , 'ubif_expe_emp'],
        USER_CREA:        ['USER_CREA'        , 'user_crea'],
        USER_MODI:        ['USER_MODI'        , 'user_modi'],
        USUA_VIGE_EMP:    ['USUA_VIGE_EMP'    , 'usua_vige_emp'],
        TYPE_:            ['TYPE_'            , 'type'],
      };

const get = async (cols, where, value, is_active) => {
    let result, qry, db;

    qry  = `SELECT `;
    qry += await utils.makeSelect(cols, TABLE, ATTR);
    qry += `FROM (
    `;
    qry += await getSelectLivestockSupplies();
    qry += `
    UNION ALL
    `;
    qry += await getSelectAgriculturalExporter();
    qry += `
    UNION ALL
    `;
    qry += await getSelectPoultryFarm();
    qry += `
    UNION ALL
    `;
    qry += await getSelectFeedProcessing();
    qry += `
    UNION ALL
    `;
    qry += await getSelectAgriculturalSupplies();
    qry += `
    UNION ALL
    `;
    qry += await getSelectLivestockExporter();
    qry += `
    UNION ALL
    `;
    qry += await getSelectExportProcessingPlant();
    qry += `
    UNION ALL
    `;
    qry += await getSelectPrimaryProcessing();
    qry += `
    UNION ALL
    `;
    qry += await getSelectOrganicCertifier();
    
    qry += `
    UNION ALL
    `;
    qry += await getSelectSlaughterhouse();
    qry += `) ALL_COMPANIES
    `;
    qry += `WHERE `;
    qry += await utils.makeWhere(where, TABLE, ATTR);

    if (is_active == "true") {
        qry += ' AND IS_ACTIVE=\'1\''
    }

    try{
        db = await oracle.connect();
        result = await db.execute(qry, [ '%' + value.trim() + '%' ], { outFormat: 4002 });
    } catch(err){
        logger.error(err);
    }  finally {
        if (db) {
          try {
            await db.close();  // always release the connection back to the pool
          } catch (err) {
            console.error(err);
          }
        }
      }

    return result;
}

const getSelectLivestockSupplies = async() => {
    return `SELECT CONCAT(CONCAT(CODI_DEPA_DPT, CODI_PROV_TPR),CODI_DIST_TDI) AS "UBIGEO",
                   CODI_DEPA_DPT AS "DEPARTAMENTO",
                   CODI_PROV_TPR AS "PROVINCIA",
                   CODI_DIST_TDI AS "DISTRITO",
                   CODI_SEDE_SED AS "HQ",
                   RAZO_SOCI_VET AS "NAME",
                   RUC_EMPR_VET AS "RUC",
                   NULL AS "DNI",
                   DIRE_LEGA_VET AS "ADDRESS_LEGAL",
                   DIRE_REAL_VET AS "ADDRESS_REAL",
                   NULL AS "LOCATION",
                   NULL AS "GEO_LAT",
                   NULL AS "GEO_LONG",
                   --ANNO_SOLI_EST AS "YEAR_",
                   CAST(EXTRACT(YEAR FROM FECH_REGI_EMP) AS CHAR(4)) AS "YEAR_",
                   FECH_EXPE_MUN AS "START_DATE",
                   FECH_REGI_EMP AS "END_DATE",
                   NUME_DOCU_VET AS "DOCUMENT_CODE",
                   REGI_PADR_EMP AS "ID",
                   NULL AS "TUITION_CODE",
                   NULL AS "RUC_PROFESSIONAL",
                   NULL AS "FILE_CODE",
                   NULL AS "FILE_CODE_AUI",
                   NULL AS "ESTATE_CODE",
                   NULL AS "AUTH_CODE",
                   NULL AS "VET_CODE",
                   NULL AS "REQUEST_CODE",
                   NULL AS "LINE",
                   NULL AS "CATEGORY",
                   NULL AS "STATE",
                   CASE WHEN ESTA_EMPR_VET = 1 AND FECH_BAJA_VET IS NULL THEN '1' ELSE '0' END AS "IS_ACTIVE",
                   FLAG_DIST_VET AS "FLAG_DIST_VET",
                   FLAG_ENVA_VET AS "FLAG_ENVA_VET",
                   FLAG_EXPE_VET AS "FLAG_EXPE_VET",
                   FLAG_EXPO_VET AS "FLAG_EXPO_VET",
                   FLAG_FABR_ALI AS "FLAG_FABR_ALI",
                   FLAG_FABR_ALIMED AS "FLAG_FABR_ALIMED",
                   FLAG_FABR_BIO AS "FLAG_FABR_BIO",
                   FLAG_FABR_FAR AS "FLAG_FABR_FAR",
                   FLAG_FABR_VET AS "FLAG_FABR_VET",
                   FLAG_IMPO_VET AS "FLAG_IMPO_VET",
                   NULL AS "FLAG_NUEVO",
                   NULL AS "FECH_ENTR_CIE",
                   NULL AS "FECH_EXPE_EMP",
                   NULL AS "FECH_MODI",
                   NULL AS "FECH_RECE_SOL",
                   NULL AS "FECH_REGI_EMP",
                   NULL AS "FECH_SOLI_EMP",
                   NULL AS "FECH_VIGE_EMP",
                   NULL AS "NUME_FOLI_EMP",
                   NULL AS "NUME_FOLI_EXP",
                   NULL AS "NUME_REGI_HIS",
                   NULL AS "NUME_REGI_TMP",
                   NULL AS "OBSE_FOLI_EXP",
                   NULL AS "RDIR_FECH_EMP",
                   NULL AS "REFE_DIRE_EMP",
                   NULL AS "REGI_LIBR_EMP",
                   NULL AS "REPR_LEGA_EMP",
                   NULL AS "TELE_EMPR_EMP",
                   NULL AS "TIPO_PERS_PRO",
                   NULL AS "TIPO_ALIMENTO",
                   NULL AS "UBIF_ALMA_EMP",
                   NULL AS "UBIF_EXPE_EMP",
                   NULL AS "USER_CREA",
                   NULL AS "USER_MODI",
                   NULL AS "USUA_VIGE_EMP",
                   'livestock-supplies' AS "TYPE_"
              FROM SIGSA.DIP_EMPRESAS_VETERINARIO`
}

const getSelectAgriculturalExporter = async() => {
  return `SELECT CONCAT(CONCAT(EXPORTER."department", EXPORTER."province"),EXPORTER."district") AS "UBIGEO",
                 EXPORTER."department" AS "DEPARTAMENTO",
                 EXPORTER."province" AS "PROVINCIA",
                 EXPORTER."district" AS "DISTRITO",
                 NULL AS "HQ",
                 EXPORTER."name" AS "NAME",
                 EXPORTER."ruc" AS "RUC",
                 EXPORTER."dni" AS "DNI",
                 EXPORTER."address_legal" AS "ADDRESS_LEGAL",
                 NULL AS "ADDRESS_REAL",
                 NULL AS "LOCATION",
                 NULL AS "GEO_LAT",
                 NULL AS "GEO_LONG",
                 EXPORTER."year" AS "YEAR_",
                 EXPORTER."start_date" AS "START_DATE",
                 NULL AS "END_DATE",
                 NULL AS "DOCUMENT_CODE",
                 EXPORTER."id" AS "ID",
                 NULL AS "TUITION_CODE",
                 NULL AS "RUC_PROFESSIONAL",
                 NULL AS "FILE_CODE",
                 NULL AS "FILE_CODE_AUI",
                 NULL AS "ESTATE_CODE",
                 NULL AS "AUTH_CODE",
                 NULL AS "VET_CODE",
                 NULL AS "REQUEST_CODE",
                 NULL AS "LINE",
                 NULL AS "CATEGORY",
                 EXPORTER."is_active" AS "STATE",
                 CASE WHEN EXPORTER."is_active" = 'ACTIVO' THEN '1' ELSE '0' END AS "IS_ACTIVE",
                 NULL AS "FLAG_DIST_VET",
                 NULL AS "FLAG_ENVA_VET",
                 NULL AS "FLAG_EXPE_VET",
                 NULL AS "FLAG_EXPO_VET",
                 NULL AS "FLAG_FABR_ALI",
                 NULL AS "FLAG_FABR_ALIMED",
                 NULL AS "FLAG_FABR_BIO",
                 NULL AS "FLAG_FABR_FAR",
                 NULL AS "FLAG_FABR_VET",
                 NULL AS "FLAG_IMPO_VET",
                 NULL AS "FLAG_NUEVO",
                 NULL AS "FECH_ENTR_CIE",
                 NULL AS "FECH_EXPE_EMP",
                 EXPORTER."fech_modi" AS "FECH_MODI",
                 NULL AS "FECH_RECE_SOL",
                 NULL AS "FECH_REGI_EMP",
                 NULL AS "FECH_SOLI_EMP",
                 NULL AS "FECH_VIGE_EMP",
                 NULL AS "NUME_FOLI_EMP",
                 NULL AS "NUME_FOLI_EXP",
                 NULL AS "NUME_REGI_HIS",
                 NULL AS "NUME_REGI_TMP",
                 NULL AS "OBSE_FOLI_EXP",
                 NULL AS "RDIR_FECH_EMP",
                 NULL AS "REFE_DIRE_EMP",
                 NULL AS "REGI_LIBR_EMP",
                 EXPORTER."contact_person_name" AS "REPR_LEGA_EMP",
                 NULL AS "TELE_EMPR_EMP",
                 NULL AS "TIPO_PERS_PRO",
                 NULL AS "TIPO_ALIMENTO",
                 NULL AS "UBIF_ALMA_EMP",
                 NULL AS "UBIF_EXPE_EMP",
                 NULL AS "USER_CREA",
                 NULL AS "USER_MODI",
                 NULL AS "USUA_VIGE_EMP",
                 'agricultural-exporter' AS "TYPE_"
            FROM (
              SELECT  
                PERSONA.PERSONA_ID AS "id", 
                CAST(EXTRACT(YEAR FROM PERSONA.FECH_CREA) AS CHAR(4)) AS "year", 
                PERSONA.NOMBRES || PERSONA.APELLIDO_PATERNO || PERSONA.APELLIDO_MATERNO AS "contact_person_name", 
                CASE WHEN PERSONA.DOCUMENTO_TIPO = '01' THEN PERSONA.DOCUMENTO_NUMERO ELSE NULL END AS "dni", 
                CASE WHEN PERSONA.DOCUMENTO_TIPO = '04' THEN PERSONA.DOCUMENTO_NUMERO ELSE PERSONA.RUC END AS "ruc",  
                PERSONA.DIRECCION AS "address_legal",
                PERSONA.DEPARTAMENTO_ID AS "department",
                PERSONA.PROVINCIA_ID AS "province",
                PERSONA.DISTRITO_ID AS "district",
                PERSONA.FECH_CREA AS "start_date",
                PERSONA.FECH_MODI AS "fech_modi",
                PERSONA.ESTADO AS "is_active",
                PERSONA.NOMBRE_RAZON_SOCIAL AS "name"
              FROM  (SELECT INFORME_INSPECCION_VERIFICACIO.PERSONA_ID FROM FINALBPM.INFORME_INSPECCION_VERIFICACIO 
                        GROUP BY INFORME_INSPECCION_VERIFICACIO.PERSONA_ID 
                        ) A LEFT JOIN SISTEMAS.PERSONA ON A.PERSONA_ID=PERSONA.PERSONA_ID
              ) EXPORTER`
}

const getSelectPoultryFarm = async() => {
    return `SELECT CONCAT(CONCAT(CODI_DEPA_DPT_ESTABLECIMIENTO, CODI_PROV_TPR_ESTABLECIMIENTO),CODI_DIST_TDI_ESTABLECIMIENTO) AS "UBIGEO",
                   CODI_DEPA_DPT_ESTABLECIMIENTO AS "DEPARTAMENTO",
                   CODI_PROV_TPR_ESTABLECIMIENTO AS "PROVINCIA",
                   CODI_DIST_TDI_ESTABLECIMIENTO AS "DISTRITO",
                   CODI_SEDE_SED AS "HQ",
                   CRAZON_SOCIAL_SOLICITANTE AS "NAME",
                   CRUC_INTERESADO AS "RUC",
                   CNUMERO_DOCUMENTO_INTERESADO AS "DNI",
                   DIRECCION_ESTABLECIMIENTO AS "ADDRESS_LEGAL",
                   NULL AS "ADDRESS_REAL",
                   NULL AS "LOCATION",
                   GEOGRAFICA_LATITUD AS "GEO_LAT",
                   GEOGRAFICA_LONGITUD AS "GEO_LONG",
                   -- CSOLICITUD_ANNO AS "YEAR_",
                   CAST(EXTRACT(YEAR FROM DFECHA_ESPECIALISTA_CIERRE) AS CHAR(4)) AS "YEAR_",
                   DSOLICITUD_FECHA AS "START_DATE",
                   DFECHA_ESPECIALISTA_CIERRE AS "END_DATE",
                   NULL AS "DOCUMENT_CODE",
                   CSOLICITUD_FUNCIONAMIENTO AS "ID",
                   NULL AS "TUITION_CODE",
                   NULL AS "RUC_PROFESSIONAL",
                   CNUME_EXPE_EXP AS "FILE_CODE",
                   NULL AS "FILE_CODE_AUI",
                   CODIGO_PREDIO AS "ESTATE_CODE",
                   NULL AS "AUTH_CODE",
                   NULL AS "VET_CODE",
                   NULL AS "REQUEST_CODE",
                   NULL AS "LINE",
                   CTIPO_PARTICULAR_MUNICIPAL AS "CATEGORY",
                   FAVORABLE AS "STATE",
                   CASE WHEN CESTADO_SOLICITUD = '02' OR CESTADO_SOLICITUD = '05' THEN '1' ELSE '0' END AS "IS_ACTIVE",
                   NULL AS "FLAG_DIST_VET",
                   NULL AS "FLAG_ENVA_VET",
                   NULL AS "FLAG_EXPE_VET",
                   NULL AS "FLAG_EXPO_VET",
                   NULL AS "FLAG_FABR_ALI",
                   NULL AS "FLAG_FABR_ALIMED",
                   NULL AS "FLAG_FABR_BIO",
                   NULL AS "FLAG_FABR_FAR",
                   NULL AS "FLAG_FABR_VET",
                   NULL AS "FLAG_IMPO_VET",
                   NULL AS "FLAG_NUEVO",
                   NULL AS "FECH_ENTR_CIE",
                   NULL AS "FECH_EXPE_EMP",
                   NULL AS "FECH_MODI",
                   NULL AS "FECH_RECE_SOL",
                   NULL AS "FECH_REGI_EMP",
                   NULL AS "FECH_SOLI_EMP",
                   NULL AS "FECH_VIGE_EMP",
                   NULL AS "NUME_FOLI_EMP",
                   NULL AS "NUME_FOLI_EXP",
                   NULL AS "NUME_REGI_HIS",
                   NULL AS "NUME_REGI_TMP",
                   NULL AS "OBSE_FOLI_EXP",
                   NULL AS "RDIR_FECH_EMP",
                   NULL AS "REFE_DIRE_EMP",
                   NULL AS "REGI_LIBR_EMP",
                   NULL AS "REPR_LEGA_EMP",
                   NULL AS "TELE_EMPR_EMP",
                   NULL AS "TIPO_PERS_PRO",
                   NULL AS "TIPO_ALIMENTO",
                   NULL AS "UBIF_ALMA_EMP",
                   NULL AS "UBIF_EXPE_EMP",
                   NULL AS "USER_CREA",
                   NULL AS "USER_MODI",
                   NULL AS "USUA_VIGE_EMP",
                   'poultry-farm' AS "TYPE_"
              FROM SIGSA.SANITARIO_FUNCIONAMIENTO`
}

const getSelectFeedProcessing = async() => {
    return `SELECT CONCAT(CONCAT(PIE_SOL_SANITARIO_DATOS.DEPARTAMENTO_ID, PIE_SOL_SANITARIO_DATOS.PROVINCIA_ID), PIE_SOL_SANITARIO_DATOS.DISTRITO_ID) AS "UBIGEO",
                   PIE_SOL_SANITARIO_DATOS.DEPARTAMENTO_ID AS "DEPARTAMENTO",
                   PIE_SOL_SANITARIO_DATOS.PROVINCIA_ID AS "PROVINCIA",
                   PIE_SOL_SANITARIO_DATOS.DISTRITO_ID AS "DISTRITO",
                   PIE_SOLICITUD_SANITARIO.CSEDE_SOLICITANTE AS "HQ",
                   PIE_SOL_SANITARIO_DATOS.RAZON_SOCIAL AS "NAME",
                   RUC AS "RUC",
                   NULL AS "DNI",
                   PIE_SOL_SANITARIO_DATOS.DIRECCION_ESTABLECIMIENTO AS "ADDRESS_LEGAL",
                   PIE_SOL_SANITARIO_DATOS.ESTABLECIMIENTO_DIRECCION AS "ADDRESS_REAL",
                   NULL AS "LOCATION",
                   NULL AS "GEO_LAT",
                   NULL AS "GEO_LONG",
                   CAST(EXTRACT(YEAR FROM PIE_SOLICITUD_SANITARIO.FECHA_CIERRE_ESPECIALISTA) AS CHAR(4)) AS "YEAR_",
                   PIE_SOLICITUD_SANITARIO.FECHA_SOLICITUD AS "START_DATE",
                   PIE_SOLICITUD_SANITARIO.FECHA_CIERRE_ESPECIALISTA AS "END_DATE",
                   NULL AS "DOCUMENT_CODE",
                   CAST(PIE_SOL_SANITARIO_DATOS.SOLICITUD_ID AS CHAR(12)) AS "ID",
                   PIE_SOL_SANITARIO_DATOS.PR_NRO_COLEGIATURA AS "TUITION_CODE",
                   PIE_SOL_SANITARIO_DATOS.RUC_PROFESIONAL AS "RUC_PROFESSIONAL",
                   NULL AS "FILE_CODE",
                   NULL AS "FILE_CODE_AUI",
                   NULL AS "ESTATE_CODE",
                   NULL AS "AUTH_CODE",
                   NULL AS "VET_CODE",
                   NULL AS "REQUEST_CODE",
                   NULL AS "LINE",
                   NULL AS "CATEGORY",
                   NULL AS "STATE",
                   CASE WHEN PIE_SOLICITUD_SANITARIO.ESTADO = 'AUTORIZADO' AND PIE_SOLICITUD_SANITARIO.CSEDE_SOLICITANTE <> '001' THEN '1' ELSE '0' END AS "IS_ACTIVE",
                   NULL AS "FLAG_DIST_VET",
                   NULL AS "FLAG_ENVA_VET",
                   NULL AS "FLAG_EXPE_VET",
                   NULL AS "FLAG_EXPO_VET",
                   NULL AS "FLAG_FABR_ALI",
                   NULL AS "FLAG_FABR_ALIMED",
                   NULL AS "FLAG_FABR_BIO",
                   NULL AS "FLAG_FABR_FAR",
                   NULL AS "FLAG_FABR_VET",
                   NULL AS "FLAG_IMPO_VET",
                   NULL AS "FLAG_NUEVO",
                   NULL AS "FECH_ENTR_CIE",
                   NULL AS "FECH_EXPE_EMP",
                   NULL AS "FECH_MODI",
                   NULL AS "FECH_RECE_SOL",
                   NULL AS "FECH_REGI_EMP",
                   NULL AS "FECH_SOLI_EMP",
                   NULL AS "FECH_VIGE_EMP",
                   NULL AS "NUME_FOLI_EMP",
                   NULL AS "NUME_FOLI_EXP",
                   NULL AS "NUME_REGI_HIS",
                   NULL AS "NUME_REGI_TMP",
                   NULL AS "OBSE_FOLI_EXP",
                   NULL AS "RDIR_FECH_EMP",
                   NULL AS "REFE_DIRE_EMP",
                   NULL AS "REGI_LIBR_EMP",
                   NULL AS "REPR_LEGA_EMP",
                   NULL AS "TELE_EMPR_EMP",
                   NULL AS "TIPO_PERS_PRO",
                   NULL AS "TIPO_ALIMENTO",
                   NULL AS "UBIF_ALMA_EMP",
                   NULL AS "UBIF_EXPE_EMP",
                   NULL AS "USER_CREA",
                   NULL AS "USER_MODI",
                   NULL AS "USUA_VIGE_EMP",
                   'feed-processing' AS "TYPE_"
              FROM SIGIA.PIE_SOL_SANITARIO_DATOS
              LEFT JOIN SIGIA.PIE_SOLICITUD_SANITARIO ON PIE_SOLICITUD_SANITARIO.SOLICITUD_ID = PIE_SOL_SANITARIO_DATOS.SOLICITUD_ID`
}

const getSelectAgriculturalSupplies = async() => {
    return `SELECT CONCAT(CONCAT(CODI_DEPA_DPT, CODI_PROV_TPR), CODI_DIST_TDI) AS "UBIGEO",
                   CODI_DEPA_DPT AS "DEPARTAMENTO",
                   CODI_PROV_TPR AS "PROVINCIA",
                   CODI_DIST_TDI AS "DISTRITO",
                   CODI_SEDE_SED AS "HQ",
                   RAZO_SOCI_EMP AS "NAME",
                   NRUC_EMPR_EMP AS "RUC",
                   NULL AS "DNI",
                   DIRE_LEGA_EMP AS "ADDRESS_LEGAL",
                   NULL AS "ADDRESS_REAL",
                   NULL AS "LOCATION",
                   NULL AS "GEO_LAT",
                   NULL AS "GEO_LONG",
                   -- ANNO_SOLI_EMP AS "YEAR_",
                   CAST(EXTRACT(YEAR FROM ESPE_FECH_CIE) AS CHAR(4)) AS "YEAR_",
                   FECH_CREA AS "START_DATE",
                   ESPE_FECH_CIE AS "END_DATE",
                   NULL AS "DOCUMENT_CODE",
                   NUME_REGI_EMP AS "ID",
                   NULL AS "TUITION_CODE",
                   NULL AS "RUC_PROFESSIONAL",
                   NUME_EXPE_EXP AS "FILE_CODE",
                   NULL AS "FILE_CODE_AUI",
                   NULL AS "ESTATE_CODE",
                   NULL AS "AUTH_CODE",
                   NULL AS "VET_CODE",
                   NUME_SOLI_EMP AS "REQUEST_CODE",
                   GIRO_EMPR_EMP AS "LINE",
                   TIPO_EMPRESA AS "CATEGORY",
                   ESTA_SOLI_EMP AS "STATE",
                   CASE WHEN (ESTA_SOLI_EMP = '01' OR ESTA_SOLI_EMP = '00') AND ESTA_VIGE_EMP IS NULL THEN '1' ELSE '0' END AS "IS_ACTIVE",
                   NULL AS "FLAG_DIST_VET",
                   NULL AS "FLAG_ENVA_VET",
                   NULL AS "FLAG_EXPE_VET",
                   NULL AS "FLAG_EXPO_VET",
                   NULL AS "FLAG_FABR_ALI",
                   NULL AS "FLAG_FABR_ALIMED",
                   NULL AS "FLAG_FABR_BIO",
                   NULL AS "FLAG_FABR_FAR",
                   NULL AS "FLAG_FABR_VET",
                   NULL AS "FLAG_IMPO_VET",
                   FLAG_NUEVO AS "FLAG_NUEVO",
                   FECH_ENTR_CIE AS "FECH_ENTR_CIE",
                   FECH_EXPE_EMP AS "FECH_EXPE_EMP",
                   FECH_MODI AS "FECH_MODI",
                   FECH_RECE_SOL AS "FECH_RECE_SOL",
                   FECH_REGI_EMP AS "FECH_REGI_EMP",
                   FECH_SOLI_EMP AS "FECH_SOLI_EMP",
                   FECH_VIGE_EMP AS "FECH_VIGE_EMP",
                   NUME_FOLI_EMP AS "NUME_FOLI_EMP",
                   NUME_FOLI_EXP AS "NUME_FOLI_EXP",
                   NUME_REGI_HIS AS "NUME_REGI_HIS",
                   NUME_REGI_TMP AS "NUME_REGI_TMP",
                   OBSE_FOLI_EXP AS "OBSE_FOLI_EXP",
                   RDIR_FECH_EMP AS "RDIR_FECH_EMP",
                   REFE_DIRE_EMP AS "REFE_DIRE_EMP",
                   REGI_LIBR_EMP AS "REGI_LIBR_EMP",
                   REPR_LEGA_EMP AS "REPR_LEGA_EMP",
                   TELE_EMPR_EMP AS "TELE_EMPR_EMP",
                   TIPO_PERS_PRO AS "TIPO_PERS_PRO",
                   NULL AS "TIPO_ALIMENTO",
                   UBIF_ALMA_EMP AS "UBIF_ALMA_EMP",
                   UBIF_EXPE_EMP AS "UBIF_EXPE_EMP",
                   USER_CREA AS "USER_CREA",
                   USER_MODI AS "USER_MODI",
                   USUA_VIGE_EMP AS "USUA_VIGE_EMP",
                   'agricultural-supplies' AS "TYPE_"
              FROM SIGSVE.REGISTRO_EMPRESA_GIRO`
}

const getSelectLivestockExporter = async() => {
    return `SELECT CONCAT(CONCAT(C.CODI_DEPA_DPT, C.CODI_PROV_TPR), C.CODI_DIST_TDI) AS "UBIGEO",
                   C.CODI_DEPA_DPT AS "DEPARTAMENTO",
                   C.CODI_PROV_TPR AS "PROVINCIA",
                   C.CODI_DIST_TDI AS "DISTRITO",
                   C.CODI_SEDE_SED AS "HQ",
                   C.NOMBRE_ESTABLECIMIENTO AS "NAME",
                   CASE WHEN C.TIPO_DOCUMENTO = '04' AND C.NUMERO_DOCUMENTO IS NOT NULL THEN C.NUMERO_DOCUMENTO ELSE CASE WHEN PERSONA.RUC IS NOT NULL THEN PERSONA.RUC ELSE PERSONA.DOCUMENTO_NUMERO END END AS "RUC",
                   CASE WHEN C.TIPO_DOCUMENTO = '01' AND C.NUMERO_DOCUMENTO IS NOT NULL THEN C.NUMERO_DOCUMENTO ELSE CASE WHEN PERSONA.DOCUMENTO_TIPO = '01' THEN PERSONA.DOCUMENTO_NUMERO ELSE NULL END END AS "DNI",
                   PERSONA.DIRECCION AS "ADDRESS_LEGAL",
                   C.DIRECCION AS "ADDRESS_REAL",
                   NULL AS "LOCATION",
                   NULL AS "GEO_LAT",
                   NULL AS "GEO_LONG",
                   -- ANHO AS "YEAR_",
                   CAST(EXTRACT(YEAR FROM C.FECH_CREA) AS CHAR(4)) AS "YEAR_",
                   C.FECH_CREA AS "START_DATE",
                   C.FECH_CREA AS "END_DATE",
                   NULL AS "DOCUMENT_CODE",
                   C.CODIGO_ESTABLECIMIENTO AS "ID",
                   NULL AS "TUITION_CODE",
                   NULL AS "RUC_PROFESSIONAL",
                   NULL AS "FILE_CODE",
                   NULL AS "FILE_CODE_AUI",
                   NULL AS "ESTATE_CODE",
                   NULL AS "AUTH_CODE",
                   NULL AS "VET_CODE",
                   NULL AS "REQUEST_CODE",
                   CASE WHEN C.TIPO_EXPL_ANI IS NULL THEN C.ESTABLECIMIENTO_EXPORTADOR ELSE C.TIPO_EXPL_ANI END AS "LINE",
                   C.TIPO_ESTABLECIMIENTO AS "CATEGORY",
                   NULL AS "STATE",
                   '1'  AS "IS_ACTIVE",
                   NULL AS "FLAG_DIST_VET",
                   NULL AS "FLAG_ENVA_VET",
                   NULL AS "FLAG_EXPE_VET",
                   NULL AS "FLAG_EXPO_VET",
                   NULL AS "FLAG_FABR_ALI",
                   NULL AS "FLAG_FABR_ALIMED",
                   NULL AS "FLAG_FABR_BIO",
                   NULL AS "FLAG_FABR_FAR",
                   NULL AS "FLAG_FABR_VET",
                   NULL AS "FLAG_IMPO_VET",
                   NULL AS "FLAG_NUEVO",
                   NULL AS "FECH_ENTR_CIE",
                   NULL AS "FECH_EXPE_EMP",
                   C.FECH_MODI AS "FECH_MODI",
                   NULL AS "FECH_RECE_SOL",
                   NULL AS "FECH_REGI_EMP",
                   NULL AS "FECH_SOLI_EMP",
                   NULL AS "FECH_VIGE_EMP",
                   NULL AS "NUME_FOLI_EMP",
                   NULL AS "NUME_FOLI_EXP",
                   NULL AS "NUME_REGI_HIS",
                   NULL AS "NUME_REGI_TMP",
                   NULL AS "OBSE_FOLI_EXP",
                   NULL AS "RDIR_FECH_EMP",
                   NULL AS "REFE_DIRE_EMP",
                   NULL AS "REGI_LIBR_EMP",
                   NULL AS "REPR_LEGA_EMP",
                   PERSONA.TELEFONO AS "TELE_EMPR_EMP",
                   NULL AS "TIPO_PERS_PRO",
                   NULL AS "TIPO_ALIMENTO",
                   NULL AS "UBIF_ALMA_EMP",
                   NULL AS "UBIF_EXPE_EMP",
                   NULL AS "USER_CREA",
                   NULL AS "USER_MODI",
                   NULL AS "USUA_VIGE_EMP",
                   'livestock-exporter' AS "TYPE_"
              FROM (
                  SELECT SAC_ESTABLECIMIENTO_REGISTRO.*, B.CODIGO_USUARIO
                  FROM SIGSA.SAC_ESTABLECIMIENTO_REGISTRO 
                    LEFT JOIN ( SELECT SAC_ESTABLECIMIENTO_EXPORTADOR.CODIGO_ESTABLECIMIENTO, MAX(SAC_ESTABLECIMIENTO_EXPORTADOR.CODIGO_USUARIO) CODIGO_USUARIO
                                FROM SIGSA.SAC_ESTABLECIMIENTO_EXPORTADOR
                                GROUP BY SAC_ESTABLECIMIENTO_EXPORTADOR.CODIGO_ESTABLECIMIENTO
                                ) B
                    ON B.CODIGO_ESTABLECIMIENTO = SAC_ESTABLECIMIENTO_REGISTRO.CODIGO_ESTABLECIMIENTO
                  ) C LEFT JOIN PERSONA ON PERSONA.PERSONA_ID = C.CODIGO_USUARIO`
}


const getSelectExportProcessingPlant = async() => {
  return `SELECT CONCAT(CONCAT(PRG_EXP_SOLICITUD_PLANTA.DPTO_SOLI_SOL, PRG_EXP_SOLICITUD_PLANTA.PROV_SOLI_SOL), PRG_EXP_SOLICITUD_PLANTA.DIST_SOLI_SOL) AS "UBIGEO",
  PRG_EXP_SOLICITUD_PLANTA.DPTO_SOLI_SOL AS "DEPARTAMENTO",
  PRG_EXP_SOLICITUD_PLANTA.PROV_SOLI_SOL AS "PROVINCIA",
  PRG_EXP_SOLICITUD_PLANTA.DIST_SOLI_SOL AS "DISTRITO",
                 PRG_EXP_CERTIFICADO_PLANTA.CODI_SEDE_SED AS "HQ",
                 PRG_EXP_CERTIFICADO_PLANTA.NOMB_EMPR_PLA AS "NAME",
                 NULL AS "RUC",
                 PRG_EXP_SOLICITUD_PLANTA.DNI_SOLI_SOL AS "DNI",
                 NULL AS "ADDRESS_LEGAL",
                 PRG_EXP_SOLICITUD_PLANTA.DIRE_SOLI_SOL AS "ADDRESS_REAL",
                 NULL AS "LOCATION",
                 NULL AS "GEO_LAT",
                 NULL AS "GEO_LONG",
                 CAST(EXTRACT(YEAR FROM PRG_EXP_CERTIFICADO_PLANTA.FECH_CREA) AS CHAR(4)) AS "YEAR_",
                 PRG_EXP_CERTIFICADO_PLANTA.FECH_CREA AS "START_DATE",
                 NULL AS "END_DATE",
                 PRG_EXP_CERTIFICADO_PLANTA.NUME_CERT_PLA AS "DOCUMENT_CODE",
                 PRG_EXP_CERTIFICADO_PLANTA.CODI_CERT_PLA AS "ID",
                 NULL AS "TUITION_CODE",
                 NULL AS "RUC_PROFESSIONAL",
                 PRG_EXP_SOLICITUD_PLANTA.CCODEXP AS "FILE_CODE",
                 NULL AS "FILE_CODE_AUI",
                 NULL AS "ESTATE_CODE",
                 NULL AS "AUTH_CODE",
                 NULL AS "VET_CODE",
                 PRG_EXP_CERTIFICADO_PLANTA.CODI_SOLI_PLA AS "REQUEST_CODE",
                 NULL AS "LINE",
                 CASE
  WHEN PRG_EXP_CERTIFICADO_PLANTA."CODI_PROC_PRO" = '301' THEN 'Centro de inspección' 
  WHEN PRG_EXP_CERTIFICADO_PLANTA."CODI_PROC_PRO" = '302' THEN 'Planta de empaque' 
  WHEN PRG_EXP_CERTIFICADO_PLANTA."CODI_PROC_PRO" = '303' THEN 'Planta de tratamiento' 
  WHEN PRG_EXP_CERTIFICADO_PLANTA."CODI_PROC_PRO" = '304' THEN 'Planta de tratamiento y empaque' 
  WHEN PRG_EXP_CERTIFICADO_PLANTA."CODI_PROC_PRO" = '305' THEN 'Embalaje de madera' 
  ELSE 'Tipo no reconocido' END AS "CATEGORY",
                 PRG_EXP_CERTIFICADO_PLANTA."ESTADO" AS "STATE",
                 CASE WHEN PRG_EXP_CERTIFICADO_PLANTA."ESTADO" NOT IN ('SUSPENDIDO','CANCELADO') THEN '1' ELSE '0' END  AS "IS_ACTIVE",
                 NULL AS "FLAG_DIST_VET",
                 NULL AS "FLAG_ENVA_VET",
                 NULL AS "FLAG_EXPE_VET",
                 NULL AS "FLAG_EXPO_VET",
                 NULL AS "FLAG_FABR_ALI",
                 NULL AS "FLAG_FABR_ALIMED",
                 NULL AS "FLAG_FABR_BIO",
                 NULL AS "FLAG_FABR_FAR",
                 NULL AS "FLAG_FABR_VET",
                 NULL AS "FLAG_IMPO_VET",
                 NULL AS "FLAG_NUEVO",
                 NULL AS "FECH_ENTR_CIE",
                 NULL AS "FECH_EXPE_EMP",
                 PRG_EXP_CERTIFICADO_PLANTA.FECH_MODI AS "FECH_MODI",
                 NULL AS "FECH_RECE_SOL",
                 NULL AS "FECH_REGI_EMP",
                 NULL AS "FECH_SOLI_EMP",
                 NULL AS "FECH_VIGE_EMP",
                 NULL AS "NUME_FOLI_EMP",
                 NULL AS "NUME_FOLI_EXP",
                 NULL AS "NUME_REGI_HIS",
                 NULL AS "NUME_REGI_TMP",
                 NULL AS "OBSE_FOLI_EXP",
                 NULL AS "RDIR_FECH_EMP",
                 NULL AS "REFE_DIRE_EMP",
                 NULL AS "REGI_LIBR_EMP",
                 PRG_EXP_SOLICITUD_PLANTA.REPRESENTANTE_LEGAL AS "REPR_LEGA_EMP",
                 NULL AS "TELE_EMPR_EMP",
                 NULL AS "TIPO_PERS_PRO",
                 NULL AS "TIPO_ALIMENTO",
                 NULL AS "UBIF_ALMA_EMP",
                 NULL AS "UBIF_EXPE_EMP",
                 NULL AS "USER_CREA",
                 NULL AS "USER_MODI",
                 NULL AS "USUA_VIGE_EMP",
                 'export-processing-plant' AS "TYPE_"
            FROM FINALBPM.PRG_EXP_CERTIFICADO_PLANTA LEFT JOIN FINALBPM.PRG_EXP_SOLICITUD_PLANTA ON PRG_EXP_CERTIFICADO_PLANTA.CODI_SOLI_PLA=PRG_EXP_SOLICITUD_PLANTA.CODI_SOLI_PLA`
}

const getSelectPrimaryProcessing = async() => {
    return `SELECT CONCAT(CONCAT(DEPARTAMENTO_ID, PROVINCIA_ID), DISTRITO_ID) AS "UBIGEO",
                   DEPARTAMENTO_ID AS "DEPARTAMENTO",
                   PROVINCIA_ID AS "PROVINCIA",
                   DISTRITO_ID AS "DISTRITO",
                   EAS_REGISTRO_SANITARIO.CSEDE_SOLICITANTE AS "HQ",
                   EAS_REGISTRO_SANITARIO.RAZON_SOCIAL AS "NAME",
                   EAS_REGISTRO_SANITARIO.RUC AS "RUC",
                   EAS_REGISTRO_SANITARIO.PR_NRO_DOCUMENTO AS "DNI",
                   EAS_REGISTRO_SANITARIO.DIRECCION_ESTABLECIMIENTO AS "ADDRESS_LEGAL",
                   NULL AS "ADDRESS_REAL",
                   NULL AS "LOCATION",
                   EAS_REGISTRO_SANITARIO.LATITUD AS "GEO_LAT",
                   EAS_REGISTRO_SANITARIO.LONGITUD AS "GEO_LONG",
                   CAST(EXTRACT(YEAR FROM EAS_REGISTRO_SANITARIO.FECHA_CIERRE_ESPECIALISTA) AS CHAR(4)) AS "YEAR_",
                   EAS_REGISTRO_SANITARIO.FECH_CREA AS "START_DATE",
                   EAS_REGISTRO_SANITARIO.FECHA_CIERRE_ESPECIALISTA AS "END_DATE",
                   EAS_REGISTRO_SANITARIO.NRO_EXPEDIENTE_SAU AS "DOCUMENT_CODE",
                   CAST(EAS_REGISTRO_SANITARIO.REGISTRO_ID AS CHAR(12)) AS "ID",
                   EAS_REGISTRO_SANITARIO.PR_NRO_COLEGIATURA AS "TUITION_CODE",
                   NULL AS "RUC_PROFESSIONAL",
                   EAS_REGISTRO_SANITARIO.NRO_INFORME AS "FILE_CODE",
                   EAS_REGISTRO_SANITARIO.NRO_INFORME_AUI AS "FILE_CODE_AUI",
                   EAS_REGISTRO_SANITARIO.NRO_REGISTRO_ESTABLECIMIENTO AS "ESTATE_CODE",
                   NULL AS "AUTH_CODE",
                   NULL AS "VET_CODE",
                   CAST(EAS_REGISTRO_SANITARIO.SOLICITUD_ID AS CHAR(12)) AS "REQUEST_CODE",
                   NULL AS "LINE",
                   NULL AS "CATEGORY",
                   EAS_REGISTRO_SANITARIO.ESTADO AS "STATE",
                   CASE WHEN (EAS_REGISTRO_CAMBIO_ESTADO.ESTADO_CAMBIO = 'AUTORIZADO' OR EAS_REGISTRO_CAMBIO_ESTADO.ESTADO_CAMBIO  IS NULL) AND EAS_REGISTRO_SANITARIO.ESTADO = 'AUTORIZADO' AND EAS_REGISTRO_SANITARIO.CSEDE_SOLICITANTE <> '1' THEN '1' ELSE '0' END AS "IS_ACTIVE",
                   NULL AS "FLAG_DIST_VET",
                   NULL AS "FLAG_ENVA_VET",
                   NULL AS "FLAG_EXPE_VET",
                   NULL AS "FLAG_EXPO_VET",
                   NULL AS "FLAG_FABR_ALI",
                   NULL AS "FLAG_FABR_ALIMED",
                   NULL AS "FLAG_FABR_BIO",
                   NULL AS "FLAG_FABR_FAR",
                   NULL AS "FLAG_FABR_VET",
                   NULL AS "FLAG_IMPO_VET",
                   NULL AS "FLAG_NUEVO",
                   NULL AS "FECH_ENTR_CIE",
                   NULL AS "FECH_EXPE_EMP",
                   NULL AS "FECH_MODI",
                   NULL AS "FECH_RECE_SOL",
                   NULL AS "FECH_REGI_EMP",
                   NULL AS "FECH_SOLI_EMP",
                   NULL AS "FECH_VIGE_EMP",
                   NULL AS "NUME_FOLI_EMP",
                   NULL AS "NUME_FOLI_EXP",
                   NULL AS "NUME_REGI_HIS",
                   NULL AS "NUME_REGI_TMP",
                   NULL AS "OBSE_FOLI_EXP",
                   NULL AS "RDIR_FECH_EMP",
                   NULL AS "REFE_DIRE_EMP",
                   NULL AS "REGI_LIBR_EMP",
                   NULL AS "REPR_LEGA_EMP",
                   NULL AS "TELE_EMPR_EMP",
                   EAS_REGISTRO_SANITARIO.TIPO_PERSONA AS "TIPO_PERS_PRO",
                   EAS_REGISTRO_SANITARIO.TIPO_ALIMENTO AS "TIPO_ALIMENTO",
                   NULL AS "UBIF_ALMA_EMP",
                   NULL AS "UBIF_EXPE_EMP",
                   NULL AS "USER_CREA",
                   NULL AS "USER_MODI",
                   NULL AS "USUA_VIGE_EMP",
                   'primary-processing' AS "TYPE_"
              FROM SIGSVE.EAS_REGISTRO_SANITARIO
              LEFT JOIN (
                SELECT A.*
                FROM SIGSVE.EAS_REGISTRO_CAMBIO_ESTADO A
                INNER JOIN (
                    SELECT REGISTRO_ID,  MAX(SECUENCIAL_ID) SECUENCIAL
                    FROM SIGSVE.EAS_REGISTRO_CAMBIO_ESTADO
                    GROUP BY REGISTRO_ID
                ) B ON (B.REGISTRO_ID = A.REGISTRO_ID) AND (B.SECUENCIAL = A.SECUENCIAL_ID)
              ) EAS_REGISTRO_CAMBIO_ESTADO ON EAS_REGISTRO_CAMBIO_ESTADO.REGISTRO_ID = EAS_REGISTRO_SANITARIO.REGISTRO_ID`
}

const getSelectOrganicCertifier = async() => {
    return `SELECT CONCAT(CONCAT(pcs.CERTIFICADOR_DEPARTAMENTO, pcs.CERTIFICADOR_PROVINCIA), pcs.CERTIFICADOR_DISTRITO) AS "UBIGEO",
                   pcs.CERTIFICADOR_DEPARTAMENTO AS "DEPARTAMENTO",
                   pcs.CERTIFICADOR_PROVINCIA AS "PROVINCIA",
                   pcs.CERTIFICADOR_DISTRITO AS "DISTRITO",
                   NULL AS "HQ",
                   pcs.CERTIFICADOR_RAZON_SOCIAL AS "NAME",
                   pcs.CERTIFICADOR_RUC AS "RUC",
                   CASE WHEN pcs.REPRESENTANTE_TIPO_DOC='01' THEN pcs.REPRESENTANTE_NUMERO_DOC ELSE NULL END AS "DNI",
                   pcs.CERTIFICADOR_DIRECCION AS "ADDRESS_REAL",
                   NULL AS "ADDRESS_LEGAL",
                   NULL AS "LOCATION",
                   NULL AS "GEO_LAT",
                   NULL AS "GEO_LONG",
                   CAST(EXTRACT(YEAR FROM pcs.FECHA_CIERRE_DIRECTOR) AS CHAR(4)) AS "YEAR_",
                   pcs.FECHA_REGISTRO AS "START_DATE",
                   pcs.FECHA_CIERRE_DIRECTOR AS "END_DATE",
                   pcr.NRO_REGISTRO AS "DOCUMENT_CODE",
                   CAST(pcr.REGISTRO_ID AS CHAR(12)) AS "ID",
                   NULL AS "TUITION_CODE",
                   NULL AS "RUC_PROFESSIONAL",
                   NULL AS "FILE_CODE",
                   NULL AS "FILE_CODE_AUI",
                   NULL AS "ESTATE_CODE",
                   pcr.CERTIFICADOR_ID AS "AUTH_CODE",
                   NULL AS "VET_CODE",
                   CAST(pcr.SOLICITUD_ID AS CHAR(12)) AS "REQUEST_CODE",
                   NULL AS "LINE",
                   NULL AS "CATEGORY",
                   NULL AS "STATE",
                   CASE WHEN pcr.ESTADO = 'REGISTRADO' THEN '1' ELSE '0' END AS "IS_ACTIVE",
                   NULL AS "FLAG_DIST_VET",
                   NULL AS "FLAG_ENVA_VET",
                   NULL AS "FLAG_EXPE_VET",
                   NULL AS "FLAG_EXPO_VET",
                   NULL AS "FLAG_FABR_ALI",
                   NULL AS "FLAG_FABR_ALIMED",
                   NULL AS "FLAG_FABR_BIO",
                   NULL AS "FLAG_FABR_FAR",
                   NULL AS "FLAG_FABR_VET",
                   NULL AS "FLAG_IMPO_VET",
                   NULL AS "FLAG_NUEVO",
                   NULL AS "FECH_ENTR_CIE",
                   NULL AS "FECH_EXPE_EMP",
                   pcs.FECHA_MODIFICACION AS "FECH_MODI",
                   NULL AS "FECH_RECE_SOL",
                   NULL AS "FECH_REGI_EMP",
                   NULL AS "FECH_SOLI_EMP",
                   NULL AS "FECH_VIGE_EMP",
                   NULL AS "NUME_FOLI_EMP",
                   NULL AS "NUME_FOLI_EXP",
                   NULL AS "NUME_REGI_HIS",
                   NULL AS "NUME_REGI_TMP",
                   NULL AS "OBSE_FOLI_EXP",
                   NULL AS "RDIR_FECH_EMP",
                   NULL AS "REFE_DIRE_EMP",
                   NULL AS "REGI_LIBR_EMP",
                   pcs.REPRESENTANTE_NOMBRE || ' ' || pcs.REPRESANTANTE_PATERNO || ' ' || pcs.REPRESENTANTE_MATERNO AS "REPR_LEGA_EMP",
                   NULL AS "TELE_EMPR_EMP",
                   NULL AS "TIPO_PERS_PRO",
                   NULL AS "TIPO_ALIMENTO",
                   NULL AS "UBIF_ALMA_EMP",
                   NULL AS "UBIF_EXPE_EMP",
                   NULL AS "USER_CREA",
                   NULL AS "USER_MODI",
                   NULL AS "USUA_VIGE_EMP",
                   'organic-certifier' AS "TYPE_"
              FROM SICPO.PO_CERTIFICADOR_REGISTRO pcr LEFT JOIN SICPO.PO_CERTIFICADOR_SOLICITUD pcs ON pcr.SOLICITUD_ID = pcs.SOLICITUD_ID
              `
}

const getSelectSlaughterhouse = async() => {
    return `SELECT CONCAT(CONCAT(CODI_DEPA_CBE, CODI_PROV_CBE),CODI_DIST_CBE) AS "UBIGEO",
                   CODI_DEPA_CBE AS "DEPARTAMENTO",
                   CODI_PROV_CBE AS "PROVINCIA",
                   CODI_DIST_CBE AS "DISTRITO",
                   CODI_SEDE_SED AS "HQ",
                   RAZO_SOCI_CBE AS "NAME",
                   RUC_CBEN_CBE AS "RUC",
                   CASE WHEN TIPO_DOCU_IDE = '01' THEN NUME_DOCU_IDE ELSE NULL END AS "DNI",
                   DIRE_CBEN_CBE AS "ADDRESS_REAL",
                   NULL AS "ADDRESS_LEGAL",
                   LOCA_CBEN_CBE AS "LOCATION",
                   GEOGRAFICA_LATITUD AS "GEO_LAT",
                   GEOGRAFICA_LONGITUD AS "GEO_LONG",
                   CAST(EXTRACT(YEAR FROM FECH_CREA) AS CHAR(4)) AS "YEAR_",
                   FECH_CREA AS "START_DATE",
                   FECH_CREA AS "END_DATE",
                   NULL AS "DOCUMENT_CODE",
                   CODI_CBEN_CBE AS "ID",
                   NULL AS "TUITION_CODE",
                   NULL AS "RUC_PROFESSIONAL",
                   NULL AS "FILE_CODE",
                   NULL AS "FILE_CODE_AUI",
                   NULL AS "ESTATE_CODE",
                   CODI_AUTO_CBE AS "AUTH_CODE",
                   CODI_MEDI_VET AS "VET_CODE",
                   NULL AS "REQUEST_CODE",
                   CASE WHEN CATE_CENT_BEN = 'C' THEN 'Matadero' ELSE CASE WHEN CATE_CENT_BEN = 'F' THEN 'Frigorífico' ELSE CASE WHEN CATE_CENT_BEN = 'P' THEN 'Centro de faenamiento' ELSE CASE WHEN CATE_CENT_BEN = 'R' THEN 'Rendering' ELSE 'No especificado' END END END END AS "LINE",
                   TIPO_CBEN_CBE AS "CATEGORY",
                   ESTA_ACTI_CBE AS "STATE",
                   CASE WHEN ESTA_ACTI_CBE = 1 THEN '1' ELSE '0' END AS "IS_ACTIVE",
                   NULL AS "FLAG_DIST_VET",
                   NULL AS "FLAG_ENVA_VET",
                   NULL AS "FLAG_EXPE_VET",
                   NULL AS "FLAG_EXPO_VET",
                   NULL AS "FLAG_FABR_ALI",
                   NULL AS "FLAG_FABR_ALIMED",
                   NULL AS "FLAG_FABR_BIO",
                   NULL AS "FLAG_FABR_FAR",
                   NULL AS "FLAG_FABR_VET",
                   NULL AS "FLAG_IMPO_VET",
                   NULL AS "FLAG_NUEVO",
                   NULL AS "FECH_ENTR_CIE",
                   NULL AS "FECH_EXPE_EMP",
                   FECH_MODI AS "FECH_MODI",
                   NULL AS "FECH_RECE_SOL",
                   NULL AS "FECH_REGI_EMP",
                   NULL AS "FECH_SOLI_EMP",
                   NULL AS "FECH_VIGE_EMP",
                   NULL AS "NUME_FOLI_EMP",
                   NULL AS "NUME_FOLI_EXP",
                   NULL AS "NUME_REGI_HIS",
                   NULL AS "NUME_REGI_TMP",
                   NULL AS "OBSE_FOLI_EXP",
                   NULL AS "RDIR_FECH_EMP",
                   NULL AS "REFE_DIRE_EMP",
                   NULL AS "REGI_LIBR_EMP",
                   NULL AS "REPR_LEGA_EMP",
                   NULL AS "TELE_EMPR_EMP",
                   NULL AS "TIPO_PERS_PRO",
                   NULL AS "TIPO_ALIMENTO",
                   NULL AS "UBIF_ALMA_EMP",
                   NULL AS "UBIF_EXPE_EMP",
                   NULL AS "USER_CREA",
                   NULL AS "USER_MODI",
                   NULL AS "USUA_VIGE_EMP",
                   CASE WHEN CATE_CENT_BEN = 'C' THEN 'slaughterhouse' ELSE CASE WHEN CATE_CENT_BEN = 'F' THEN 'cold_meat_stores' ELSE CASE WHEN CATE_CENT_BEN = 'P' THEN 'poultry_slaughter_center' ELSE CASE WHEN CATE_CENT_BEN = 'R' THEN 'rendering' ELSE 'other' END END END END AS "TYPE_"
              FROM SIGSA.CENTRO_BENEFICIO_PADRON`
}

module.exports = {
    get,
    SCHEMA,
    TABLE,
    ATTR
}
